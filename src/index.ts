import { load as parseTOML } from "js-toml"; // not bun built in TOML since it breaks for string escaped quote
import fs from "fs";

interface WordData {
    definition: {
        text: string;
        class: string;
        example: string;
    }[];
}

// delete ./temp/
fs.rmSync('./temp/', {
    recursive: true,
    force: true
});
// delete ./dist/
fs.rmSync('./dist/', {
    recursive: true,
    force: true
});

fs.mkdirSync('./temp/');

let proc = Bun.spawn(["git", "clone", "https://github.com/engli-lang/engli.git"], {
    cwd: './temp/'
});
await proc.exited;

if(proc.exitCode !== 0) {
    console.log('uh oh it didnt exit with 0');
    process.exit(1);
}

let words = fs.readdirSync('./temp/engli/words/').sort();
console.log(words);

let wordDatas = words.map((word) => {
    return {
        word: word.split(".")[0],
        data: parseTOML(fs.readFileSync('./temp/engli/words/' + word, "utf8")) as WordData
    };
});

// delete ./temp/ again
fs.rmSync('./temp/', {
    recursive: true,
    force: true
});

let dictionary: {
    [word: string]: WordData;
} = {};

for(let wordData of wordDatas) {
    dictionary[wordData.word] = wordData.data;
}

// write to dist/json
fs.mkdirSync('./dist');
fs.writeFileSync('./dist/engli.json', JSON.stringify(dictionary));
fs.writeFileSync('./dist/dictionary.ts', `
// Generated by engli-json
// Data source: https://github.com/engli-lang/engli/

interface WordData {
    definition: {
        text: string;
        class: string;
        example: string;
    }[];
}

const dictionary: {
    [word: string]: WordData;
} = ${JSON.stringify(dictionary, null, 4)};

export default dictionary;
`);


console.log('Wrote dist/engli.json!');